scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type User {
  id: ID!
  name: String!
  email: String!
  articles: [Article!]! @hasMany
  articleCount: Int!
  created_at: DateTime
  articlelist: [ArticlePaginator!]
}

type Article {
  id: ID!
  title: String!
  content: String!
  author: User! @belongsTo(relation: "user")
}

type Query {
  user(id: ID! @eq): User @find
  users: [User!]! @paginate
  article(id: ID! @eq): Article @find
  articles: [Article!]! @paginate
  me: User @auth(guard: "api")
}

type UserPaginator {
  paginatorInfo: PaginatorInfo!
  data: [User!]!
}
type ArticlePaginator {
  paginatorInfo: PaginatorInfo!
  data: [Article!]!
}

type PaginatorInfo {
  count: Int!
  currentPage: Int!
  firstItem: Int
  hasMorePages: Boolean!
  lastItem: Int
  lastPage: Int!
  perPage: Int!
  total: Int!
}

type Mutation {
  createUser(
    name: String!
    email: String! @rules(apply: ["email", "unique:users"])
    password: String! @bcrypt @rules(apply: ["min:6"])
  ): User @create

  login(
      email: String!
      password: String!
    ): String @field(resolver: "AuthMutator@resolve")

  createArticle(title: String!, content: String!, author: ID!): Article
    @field(resolver: "ArticleMutator@create")
    @broadcast(subscription: "articleUpdated")

  updateArticle(title: String!, content: String!, author: ID!): Article
    @field(resolver: "UpdateArticle@resolve")
    @broadcast(subscription: "articleUpdated")
    @event(dispatch: "App\\Providers\\Message")
}
type Subscription {
    articleUpdated(id: ID): Article
}

#imports posts.graphql
